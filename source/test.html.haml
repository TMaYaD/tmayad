#chart.stretch

:coffee
  $ ->
    $chart = $('#chart')

    chart_width   = $chart.innerWidth()
    chart_height  = $chart.innerHeight()

    nodes     = undefined
    links     = undefined
    ancestors = undefined
    siblings  = undefined

    vis = d3.select("#chart").append("svg:svg").attr("class", "stretch")

    content_nodes = undefined
    content_links = undefined

    update = ->
      content_layout
        .nodes(nodes)
        .links(links)
        .start()

      #required atleast temporarily to rerender after indices are mapped to objects
      render_links links

    render = ->
      render_nodes(nodes)
      render_links(links)

    render_nodes = (nodes)->
      # Update the nodes…
      content_nodes = vis.selectAll("text.node").data(nodes, (d) ->
        d.name
      ).style("fill", 'black')

      # Enter any new nodes.
      content_nodes.enter().append("svg:text")
        .attr("class", "node")
        .text((d) ->
          d.name
        )
        .each( (d) ->
          box = this.getBBox()
          d.width = box.width
          d.height = box.height
        )
        .attr("text-anchor", "middle")
        .style("fill", 'black')
        .style("stroke", 'white')
        #.call(content_layout.drag)
        #.on("click", click)

      # Exit any old nodes.
      content_nodes.exit().remove()


    render_links = (links)->
      # Update the links…
      content_links = vis.selectAll("line.link").data(links, (d) ->
        d.target.name
      )

      # Enter any new links.
      content_links.enter().insert("svg:line", ".node").attr("class", "link")

      # Exit any old links.
      content_links.exit().remove()

    update_node_positions = ->
      content_links
        .attr("x1", (d) ->
          d.source.x
        )
        .attr("y1", (d) ->
          d.source.y
        )
        .attr("x2", (d) ->
          d.target.x
        )
        .attr("y2", (d) ->
          d.target.y
        )

      content_nodes
        .attr("x", (d) ->
          d.x
        )
        .attr("y", (d) ->
          d.y
        )

    window.content_layout = d3.layout
                        .force()
                        .on('tick', update_node_positions)
                        .size([chart_width, chart_height])
                        .linkStrength(0.01)
                        .charge(-200)
                        .gravity(0.05)

    d3.json "test.json", (json) ->
      nodes     = json.nodes
      links     = json.links
      ancestors = json.ancestors
      siblings  = json.siblings
      render()
      update()
